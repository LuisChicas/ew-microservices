using EasyWallet.Business.Clients.Abstractions;
using EasyWallet.Business.Clients.Dtos;
using EasyWallet.Business.Models;
using EasyWallet.Business.Services;
using EasyWallet.Business.Tests.Data;
using EasyWallet.Data.Abstractions;
using EasyWallet.Data.Entities;
using Moq;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace EasyWallet.Business.Tests.Services
{
    public class CategoryServiceTests
    {
        [Fact]
        public async Task GetActiveCategoriesByUser_ValidUserId_ReturnsCategories()
        {
            var categoryService = CreateCategoryServiceWithActiveCategories(Categories.ActiveCategoriesWithTags);
            int userId = 1;

            var categories = await categoryService.GetActiveCategoriesByUser(userId);

            Assert.NotEmpty(categories);
        }

        [Fact]
        public async Task GetActiveCategoriesByUser_ValidUserId_DoesntReturnAutogeneratedTags()
        {
            var categoryService = CreateCategoryServiceWithActiveCategories(Categories.ActiveCategoriesWithTags);
            int userId = 1;

            var categories = await categoryService.GetActiveCategoriesByUser(userId);

            var tags = categories.SelectMany(c => c.Tags);
            Assert.DoesNotContain(tags, t => t.IsAutoGenerated);
        }

        [Fact]
        public async Task GetActiveCategoriesByUser_InvalidUserId_ReturnsEmpty()
        {
            var categoryService = CreateCategoryServiceWithActiveCategories();
            int userId = 1;

            var categories = await categoryService.GetActiveCategoriesByUser(userId);

            Assert.Empty(categories);
        }

        [Fact]
        public async Task CreateCategory_Success_UsesClient()
        {
            var categoryService = CreateServiceForCategoryCreation(
                out var fakeCategoryRepository,
                out var fakeTagRepository,
                out var mockCategoriesClient);

            int userId = 1;
            string name = "Category";

            await categoryService.CreateCategory(userId, name, new List<Tag>());

            mockCategoriesClient.Verify(x => x.CreateCategory(
                It.Is<int>(y => y == userId),
                It.Is<string>(y => y == name),
                It.IsAny<List<string>>()));
        }

        [Fact]
        public async Task GetActiveCategoryById_Success_ReturnsCategoryWithoutAutogeneratedTags()
        {
            CategoryData categoryData = Categories.CategoryWithDeletedAndAutogeneratedTags;
            var categoryService = CreateCategoryServiceWithActiveCategoryById(categoryData);

            Category category = await categoryService.GetActiveCategoryById(categoryData.Id);

            Assert.DoesNotContain(category.Tags, t => t.IsAutoGenerated);
        }

        [Fact]
        public async Task GetActiveCategoryById_Success_ReturnsCategoryWithoutDeletedTags()
        {
            CategoryData categoryData = Categories.CategoryWithDeletedAndAutogeneratedTags;
            var categoryService = CreateCategoryServiceWithActiveCategoryById(categoryData);

            Category category = await categoryService.GetActiveCategoryById(categoryData.Id);

            var deletedTags = categoryData.Tags.Where(t => t.DeletedAt != null);
            Assert.DoesNotContain(category.Tags, t => deletedTags.Any(dt => dt.Id == t.Id));
        }

        [Fact]
        public async Task GetActiveCategoryById_CategoryNotFound_ReturnsNull()
        {
            CategoryData categoryData = null;
            var categoryService = CreateCategoryServiceWithActiveCategoryById(categoryData);
            int categoryId = 1;

            Category category = await categoryService.GetActiveCategoryById(categoryId);

            Assert.Null(category);
        }

        [Fact]
        public async Task UpdateCategory_AddsTag_CreatesJustNewTag()
        {
            var existingTags = new List<TagData>
            {
                new TagData 
                { 
                    Id = 1, 
                    CategoryId = 1, 
                    Name = "Netflix" 
                }
            };
            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = existingTags
            };

            var categoryService = CreateServiceForCategoryUpdate(
                out var fakeCategoryRepository,
                out Mock<ITagRepository> mockTagRepository,
                out var fakeCategoriesClient,
                existingCategory,
                existingTags);

            var newTags = new List<Tag>
            {
                new Tag { Name = "Netflix" },
                new Tag { Name = "Disney+" }
            };

            await categoryService.UpdateCategory(existingCategory.UserId, existingCategory.Name, newTags);

            mockTagRepository.Verify(x => x.AddRangeAsync(It.Is<IEnumerable<TagData>>(createdTags =>
                !createdTags.Any(t => t.Name == newTags[0].Name) &&
                createdTags.Any(t => t.Name == newTags[1].Name)
            )));
        }

        [Fact]
        public async Task UpdateCategory_NewTagWithSameNameAsAutogenerated_DeletesAutogeneratedTag()
        {
            var activeTags = new List<TagData>
            {
                new TagData { Id = 1, Name = "Netflix", IsAutoGenerated = true },
                new TagData { Id = 1, Name = "Disney+" }
            };

            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = new List<TagData>
                {
                    new TagData { Id = 1, Name = "Disney+" }
                }
            };

            var categoryService = CreateServiceForCategoryUpdate(
                out var fakeCategoryRepository,
                out var fakeTagRepository,
                out var fakeCategoriesClient,
                existingCategory,
                activeTags);

            var newTags = new List<Tag>
            {
                new Tag { Name = "Disney+" },
                new Tag { Name = "Netflix" }
            };

            await categoryService.UpdateCategory(existingCategory.Id, existingCategory.Name, newTags);

            Assert.NotNull(activeTags[0].DeletedAt);
        }

        [Fact]
        public async Task UpdateCategory_RemovesTag_DeletesRemovedTag()
        {
            var existingTags = new List<TagData>
            {
                new TagData { Id = 1, Name = "Netflix" },
                new TagData { Id = 1, Name = "Disney+" }
            };
            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = existingTags
            };

            var categoryService = CreateServiceForCategoryUpdate(
                out var fakeCategoryRepository,
                out var fakeTagRepository,
                out var fakeCategoriesClient,
                existingCategory,
                existingTags);

            var newTags = new List<Tag>
            {
                new Tag { Name = "Netflix" }
            };

            await categoryService.UpdateCategory(existingCategory.UserId, existingCategory.Name, newTags);

            Assert.NotNull(existingTags[1].DeletedAt);
        }

        [Fact]
        public async Task UpdateCategory_ChangesName_UpdatesName()
        {
            var activeTags = new List<TagData>
            {
                new TagData { Id = 1, Name = "Netflix" }
            };

            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = activeTags
            };

            var categoryService = CreateServiceForCategoryUpdate(
                out var fakeCategoryRepository,
                out var fakeTagRepository,
                out var fakeCategoriesClient,
                existingCategory,
                activeTags);

            var tags = new List<Tag>
            {
                new Tag { Name = "Netflix" }
            };

            string newName = "Subscriptions";

            await categoryService.UpdateCategory(existingCategory.Id, newName, tags);

            Assert.Equal(newName, existingCategory.Name);
        }

        [Fact]
        public async Task DeleteCategory_Success_DeletesCategory()
        {
            var categoryTags = new List<TagData>
            {
                new TagData { Name = "Netflix" }
            };
            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = categoryTags
            };

            var categoryService = CreateCategoryServiceWithActiveCategoryById(existingCategory);

            await categoryService.DeleteCategory(existingCategory.Id);

            Assert.NotNull(existingCategory.DeletedAt);
        }

        [Fact]
        public async Task DeleteCategory_Success_DeletesCategoryTags()
        {
            var categoryTags = new List<TagData>
            {
                new TagData { Name = "Netflix" }
            };
            var existingCategory = new CategoryData
            {
                Id = 1,
                UserId = 1,
                Name = "Bills",
                Tags = categoryTags
            };

            var categoryService = CreateCategoryServiceWithActiveCategoryById(existingCategory);

            await categoryService.DeleteCategory(existingCategory.Id);

            Assert.NotNull(categoryTags[0].DeletedAt);
        }

        private CategoryService CreateCategoryServiceWithActiveCategories(List<CategoryDto> activeCategories = null)
        {
            var stubUnitOfWork = new Mock<IUnitOfWork>();

            var stubCategoriesClient = new Mock<ICategoriesClient>();
            stubCategoriesClient
                .Setup(x => x.GetCategoriesByUserId(It.IsAny<int>()).Result)
                .Returns(activeCategories?.AsEnumerable());

            return new CategoryService(stubUnitOfWork.Object, stubCategoriesClient.Object);
        }

        private CategoryService CreateServiceForCategoryCreation(
            out Mock<ICategoryRepository> fakeCategoryRepository,
            out Mock<ITagRepository> fakeTagRepository,
            out Mock<ICategoriesClient> fakeCategoriesClient,
            List<TagData> activeTags = null)
        {
            fakeCategoryRepository = new Mock<ICategoryRepository>();
            fakeCategoryRepository
                .Setup(x => x.AddAsync(It.IsAny<CategoryData>()))
                .Verifiable();

            fakeTagRepository = new Mock<ITagRepository>();
            fakeTagRepository
                .Setup(x => x.GetActiveTagsByUser(It.IsAny<int>()).Result)
                .Returns(activeTags ?? new List<TagData>());

            fakeTagRepository
                .Setup(x => x.AddRangeAsync(It.IsAny<IEnumerable<TagData>>()))
                .Verifiable();

            var stubUnitOfWork = new Mock<IUnitOfWork>();
            stubUnitOfWork.Setup(x => x.Categories).Returns(fakeCategoryRepository.Object);
            stubUnitOfWork.Setup(x => x.Tags).Returns(fakeTagRepository.Object);

            fakeCategoriesClient = new Mock<ICategoriesClient>();

            return new CategoryService(stubUnitOfWork.Object, fakeCategoriesClient.Object);
        }

        private CategoryService CreateCategoryServiceWithActiveCategoryById(CategoryData activeCategory)
        {
            var stubCategoryRepository = new Mock<ICategoryRepository>();
            stubCategoryRepository
                .Setup(x => x.GetActiveCategoryWithTagsById(It.IsAny<int>()))
                .Returns(Task.FromResult(activeCategory));

            var stubUnitOfWork = new Mock<IUnitOfWork>();
            stubUnitOfWork.Setup(x => x.Categories).Returns(stubCategoryRepository.Object);

            var stubCategoriesClient = new Mock<ICategoriesClient>();

            return new CategoryService(stubUnitOfWork.Object, stubCategoriesClient.Object);
        }

        private CategoryService CreateServiceForCategoryUpdate(
            out Mock<ICategoryRepository> fakeCategoryRepository,
            out Mock<ITagRepository> fakeTagRepository,
            out Mock<ICategoriesClient> fakeCategoriesClient,
            CategoryData existingCategory,
            List<TagData> activeTags = null)
        {
            fakeCategoryRepository = new Mock<ICategoryRepository>();
            fakeCategoryRepository
                .Setup(x => x.GetActiveCategoryWithTagsById(It.IsAny<int>()))
                .Returns(Task.FromResult(existingCategory));

            fakeTagRepository = new Mock<ITagRepository>();
            fakeTagRepository
                .Setup(x => x.GetActiveTagsByUser(It.IsAny<int>()).Result)
                .Returns(activeTags ?? new List<TagData>());

            fakeTagRepository
                .Setup(x => x.AddRangeAsync(It.IsAny<IEnumerable<TagData>>()))
                .Verifiable();

            var stubUnitOfWork = new Mock<IUnitOfWork>();
            stubUnitOfWork.Setup(x => x.Categories).Returns(fakeCategoryRepository.Object);
            stubUnitOfWork.Setup(x => x.Tags).Returns(fakeTagRepository.Object);

            fakeCategoriesClient = new Mock<ICategoriesClient>();

            return new CategoryService(stubUnitOfWork.Object, fakeCategoriesClient.Object);
        }
    }
}
